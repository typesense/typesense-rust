/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 28.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImportDocumentsImportDocumentsParametersParameter {
    #[serde(rename = "batch_size", skip_serializing_if = "Option::is_none")]
    pub batch_size: Option<i32>,
    /// Returning the id of the imported documents. If you want the import response to return the ingested document's id in the response, you can use the return_id parameter.
    #[serde(rename = "return_id", skip_serializing_if = "Option::is_none")]
    pub return_id: Option<bool>,
    #[serde(rename = "remote_embedding_batch_size", skip_serializing_if = "Option::is_none")]
    pub remote_embedding_batch_size: Option<i32>,
    #[serde(rename = "return_doc", skip_serializing_if = "Option::is_none")]
    pub return_doc: Option<bool>,
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<models::IndexAction>,
    #[serde(rename = "dirty_values", skip_serializing_if = "Option::is_none")]
    pub dirty_values: Option<models::DirtyValues>,
}

impl ImportDocumentsImportDocumentsParametersParameter {
    pub fn new() -> ImportDocumentsImportDocumentsParametersParameter {
        ImportDocumentsImportDocumentsParametersParameter {
            batch_size: None,
            return_id: None,
            remote_embedding_batch_size: None,
            return_doc: None,
            action: None,
            dirty_values: None,
        }
    }
}

