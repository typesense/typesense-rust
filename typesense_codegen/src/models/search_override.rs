/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.25.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchOverride {
    #[serde(rename = "rule")]
    pub rule: Box<crate::models::SearchOverrideRule>,
    /// List of document `id`s that should be included in the search results with their corresponding `position`s.
    #[serde(rename = "includes", skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<crate::models::SearchOverrideInclude>>,
    /// List of document `id`s that should be excluded from the search results.
    #[serde(rename = "excludes", skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<crate::models::SearchOverrideExclude>>,
    /// A filter by clause that is applied to any search query that matches the override rule.
    #[serde(rename = "filter_by", skip_serializing_if = "Option::is_none")]
    pub filter_by: Option<String>,
    /// Indicates whether search query tokens that exist in the override's rule should be removed from the search query.
    #[serde(
        rename = "remove_matched_tokens",
        skip_serializing_if = "Option::is_none"
    )]
    pub remove_matched_tokens: Option<bool>,
    #[serde(rename = "id")]
    pub id: String,
}

impl SearchOverride {
    pub fn new(rule: crate::models::SearchOverrideRule, id: String) -> SearchOverride {
        SearchOverride {
            rule: Box::new(rule),
            includes: None,
            excludes: None,
            filter_by: None,
            remove_matched_tokens: None,
            id,
        }
    }
}
