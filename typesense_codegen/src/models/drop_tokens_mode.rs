/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 28.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DropTokensMode : Dictates the direction in which the words in the query must be dropped when the original words in the query do not appear in any document. Values: right_to_left (default), left_to_right, both_sides:3 A note on both_sides:3 - for queries upto 3 tokens (words) in length, this mode will drop tokens from both sides and exhaustively rank all matching results. If query length is greater than 3 words, Typesense will just fallback to default behavior of right_to_left 
/// Dictates the direction in which the words in the query must be dropped when the original words in the query do not appear in any document. Values: right_to_left (default), left_to_right, both_sides:3 A note on both_sides:3 - for queries upto 3 tokens (words) in length, this mode will drop tokens from both sides and exhaustively rank all matching results. If query length is greater than 3 words, Typesense will just fallback to default behavior of right_to_left 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DropTokensMode {
    #[serde(rename = "right_to_left")]
    RightToLeft,
    #[serde(rename = "left_to_right")]
    LeftToRight,
    #[serde(rename = "both_sides:3")]
    BothSidesColon3,

}

impl std::fmt::Display for DropTokensMode {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::RightToLeft => write!(f, "right_to_left"),
            Self::LeftToRight => write!(f, "left_to_right"),
            Self::BothSidesColon3 => write!(f, "both_sides:3"),
        }
    }
}

impl Default for DropTokensMode {
    fn default() -> DropTokensMode {
        Self::RightToLeft
    }
}

