/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 0.23.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Eq, Default, Serialize, Deserialize)]
pub struct SearchResultHit {
    /// Contains highlighted portions of the search fields
    #[serde(rename = "highlights", skip_serializing_if = "Option::is_none")]
    pub highlights: Option<Vec<crate::models::SearchHighlight>>,
    /// Can be any key-value pair
    #[serde(rename = "document", skip_serializing_if = "Option::is_none")]
    pub document: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "text_match", skip_serializing_if = "Option::is_none")]
    pub text_match: Option<i64>,
    /// Can be any key-value pair
    #[serde(
        rename = "geo_distance_meters",
        skip_serializing_if = "Option::is_none"
    )]
    pub geo_distance_meters: Option<::std::collections::HashMap<String, i32>>,
}

impl SearchResultHit {
    pub fn new() -> SearchResultHit {
        SearchResultHit {
            highlights: None,
            document: None,
            text_match: None,
            geo_distance_meters: None,
        }
    }
}
