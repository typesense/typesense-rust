/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 28.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for passing parameters to the method [`delete_document`]
#[derive(Clone, Debug)]
pub struct DeleteDocumentParams {
    /// The name of the collection to search for the document under
    pub collection_name: String,
    /// The Document ID
    pub document_id: String,
}

/// struct for passing parameters to the method [`delete_documents`]
#[derive(Clone, Debug)]
pub struct DeleteDocumentsParams {
    /// The name of the collection to delete documents from
    pub collection_name: String,
    pub filter_by: Option<String>,
    pub batch_size: Option<i32>,
    pub ignore_not_found: Option<bool>,
    pub truncate: Option<bool>,
}

/// struct for passing parameters to the method [`delete_search_override`]
#[derive(Clone, Debug)]
pub struct DeleteSearchOverrideParams {
    /// The name of the collection
    pub collection_name: String,
    /// The ID of the search override to delete
    pub override_id: String,
}

/// struct for passing parameters to the method [`export_documents`]
#[derive(Clone, Debug)]
pub struct ExportDocumentsParams {
    /// The name of the collection
    pub collection_name: String,
    pub filter_by: Option<String>,
    pub include_fields: Option<String>,
    pub exclude_fields: Option<String>,
}

/// struct for passing parameters to the method [`get_document`]
#[derive(Clone, Debug)]
pub struct GetDocumentParams {
    /// The name of the collection to search for the document under
    pub collection_name: String,
    /// The Document ID
    pub document_id: String,
}

/// struct for passing parameters to the method [`get_search_override`]
#[derive(Clone, Debug)]
pub struct GetSearchOverrideParams {
    /// The name of the collection
    pub collection_name: String,
    /// The id of the search override
    pub override_id: String,
}

/// struct for passing parameters to the method [`get_search_overrides`]
#[derive(Clone, Debug)]
pub struct GetSearchOverridesParams {
    /// The name of the collection
    pub collection_name: String,
}

/// struct for passing parameters to the method [`import_documents`]
#[derive(Clone, Debug)]
pub struct ImportDocumentsParams {
    /// The name of the collection
    pub collection_name: String,
    /// The json array of documents or the JSONL file to import
    pub body: String,
    pub batch_size: Option<i32>,
    pub return_id: Option<bool>,
    pub remote_embedding_batch_size: Option<i32>,
    pub return_doc: Option<bool>,
    pub action: Option<models::IndexAction>,
    pub dirty_values: Option<models::DirtyValues>,
}

/// struct for passing parameters to the method [`index_document`]
#[derive(Clone, Debug)]
pub struct IndexDocumentParams {
    /// The name of the collection to add the document to
    pub collection_name: String,
    /// The document object to be indexed
    pub body: serde_json::Value,
    /// Additional action to perform
    pub action: Option<String>,
    /// Dealing with Dirty Data
    pub dirty_values: Option<models::DirtyValues>,
}

/// struct for passing parameters to the method [`multi_search`]
#[derive(Clone, Debug)]
pub struct MultiSearchParams {
    pub q: Option<String>,
    pub query_by: Option<String>,
    pub query_by_weights: Option<String>,
    pub text_match_type: Option<String>,
    pub prefix: Option<String>,
    pub infix: Option<String>,
    pub max_extra_prefix: Option<i32>,
    pub max_extra_suffix: Option<i32>,
    pub filter_by: Option<String>,
    pub sort_by: Option<String>,
    pub facet_by: Option<String>,
    pub max_facet_values: Option<i32>,
    pub facet_query: Option<String>,
    pub num_typos: Option<String>,
    pub page: Option<i32>,
    pub per_page: Option<i32>,
    pub limit: Option<i32>,
    pub offset: Option<i32>,
    pub group_by: Option<String>,
    pub group_limit: Option<i32>,
    pub group_missing_values: Option<bool>,
    pub include_fields: Option<String>,
    pub exclude_fields: Option<String>,
    pub highlight_full_fields: Option<String>,
    pub highlight_affix_num_tokens: Option<i32>,
    pub highlight_start_tag: Option<String>,
    pub highlight_end_tag: Option<String>,
    pub snippet_threshold: Option<i32>,
    pub drop_tokens_threshold: Option<i32>,
    pub drop_tokens_mode: Option<models::DropTokensMode>,
    pub typo_tokens_threshold: Option<i32>,
    pub enable_typos_for_alpha_numerical_tokens: Option<bool>,
    pub filter_curated_hits: Option<bool>,
    pub enable_synonyms: Option<bool>,
    pub synonym_prefix: Option<bool>,
    pub synonym_num_typos: Option<i32>,
    pub pinned_hits: Option<String>,
    pub hidden_hits: Option<String>,
    pub override_tags: Option<String>,
    pub highlight_fields: Option<String>,
    pub pre_segmented_query: Option<bool>,
    pub preset: Option<String>,
    pub enable_overrides: Option<bool>,
    pub prioritize_exact_match: Option<bool>,
    pub prioritize_token_position: Option<bool>,
    pub prioritize_num_matching_fields: Option<bool>,
    pub enable_typos_for_numerical_tokens: Option<bool>,
    pub exhaustive_search: Option<bool>,
    pub search_cutoff_ms: Option<i32>,
    pub use_cache: Option<bool>,
    pub cache_ttl: Option<i32>,
    pub min_len_1typo: Option<i32>,
    pub min_len_2typo: Option<i32>,
    pub vector_query: Option<String>,
    pub remote_embedding_timeout_ms: Option<i32>,
    pub remote_embedding_num_tries: Option<i32>,
    pub facet_strategy: Option<String>,
    pub stopwords: Option<String>,
    pub facet_return_parent: Option<String>,
    pub voice_query: Option<String>,
    pub conversation: Option<bool>,
    pub conversation_model_id: Option<String>,
    pub conversation_id: Option<String>,
    pub multi_search_searches_parameter: Option<models::MultiSearchSearchesParameter>,
}

/// struct for passing parameters to the method [`search_collection`]
#[derive(Clone, Debug)]
pub struct SearchCollectionParams {
    /// The name of the collection to search for the document under
    pub collection_name: String,
    pub q: Option<String>,
    pub query_by: Option<String>,
    pub nl_query: Option<bool>,
    pub nl_model_id: Option<String>,
    pub query_by_weights: Option<String>,
    pub text_match_type: Option<String>,
    pub prefix: Option<String>,
    pub infix: Option<String>,
    pub max_extra_prefix: Option<i32>,
    pub max_extra_suffix: Option<i32>,
    pub filter_by: Option<String>,
    pub max_filter_by_candidates: Option<i32>,
    pub sort_by: Option<String>,
    pub facet_by: Option<String>,
    pub max_facet_values: Option<i32>,
    pub facet_query: Option<String>,
    pub num_typos: Option<String>,
    pub page: Option<i32>,
    pub per_page: Option<i32>,
    pub limit: Option<i32>,
    pub offset: Option<i32>,
    pub group_by: Option<String>,
    pub group_limit: Option<i32>,
    pub group_missing_values: Option<bool>,
    pub include_fields: Option<String>,
    pub exclude_fields: Option<String>,
    pub highlight_full_fields: Option<String>,
    pub highlight_affix_num_tokens: Option<i32>,
    pub highlight_start_tag: Option<String>,
    pub highlight_end_tag: Option<String>,
    pub enable_highlight_v1: Option<bool>,
    pub snippet_threshold: Option<i32>,
    pub drop_tokens_threshold: Option<i32>,
    pub drop_tokens_mode: Option<models::DropTokensMode>,
    pub typo_tokens_threshold: Option<i32>,
    pub enable_typos_for_alpha_numerical_tokens: Option<bool>,
    pub filter_curated_hits: Option<bool>,
    pub enable_synonyms: Option<bool>,
    pub synonym_prefix: Option<bool>,
    pub synonym_num_typos: Option<i32>,
    pub pinned_hits: Option<String>,
    pub hidden_hits: Option<String>,
    pub override_tags: Option<String>,
    pub highlight_fields: Option<String>,
    pub split_join_tokens: Option<String>,
    pub pre_segmented_query: Option<bool>,
    pub preset: Option<String>,
    pub enable_overrides: Option<bool>,
    pub prioritize_exact_match: Option<bool>,
    pub max_candidates: Option<i32>,
    pub prioritize_token_position: Option<bool>,
    pub prioritize_num_matching_fields: Option<bool>,
    pub enable_typos_for_numerical_tokens: Option<bool>,
    pub exhaustive_search: Option<bool>,
    pub search_cutoff_ms: Option<i32>,
    pub use_cache: Option<bool>,
    pub cache_ttl: Option<i32>,
    pub min_len_1typo: Option<i32>,
    pub min_len_2typo: Option<i32>,
    pub vector_query: Option<String>,
    pub remote_embedding_timeout_ms: Option<i32>,
    pub remote_embedding_num_tries: Option<i32>,
    pub facet_strategy: Option<String>,
    pub stopwords: Option<String>,
    pub facet_return_parent: Option<String>,
    pub voice_query: Option<String>,
    pub conversation: Option<bool>,
    pub conversation_model_id: Option<String>,
    pub conversation_id: Option<String>,
}

/// struct for passing parameters to the method [`update_document`]
#[derive(Clone, Debug)]
pub struct UpdateDocumentParams {
    /// The name of the collection to search for the document under
    pub collection_name: String,
    /// The Document ID
    pub document_id: String,
    /// The document object with fields to be updated
    pub body: serde_json::Value,
    /// Dealing with Dirty Data
    pub dirty_values: Option<models::DirtyValues>,
}

/// struct for passing parameters to the method [`update_documents`]
#[derive(Clone, Debug)]
pub struct UpdateDocumentsParams {
    /// The name of the collection to update documents in
    pub collection_name: String,
    /// The document fields to be updated
    pub body: serde_json::Value,
    pub filter_by: Option<String>,
}

/// struct for passing parameters to the method [`upsert_search_override`]
#[derive(Clone, Debug)]
pub struct UpsertSearchOverrideParams {
    /// The name of the collection
    pub collection_name: String,
    /// The ID of the search override to create/update
    pub override_id: String,
    /// The search override object to be created/updated
    pub search_override_schema: models::SearchOverrideSchema,
}

/// struct for typed errors of method [`delete_document`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteDocumentError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_documents`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteDocumentsError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_search_override`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSearchOverrideError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`export_documents`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExportDocumentsError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_document`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDocumentError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_search_override`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSearchOverrideError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_search_overrides`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSearchOverridesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`import_documents`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ImportDocumentsError {
    Status400(models::ApiResponse),
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_document`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexDocumentError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`multi_search`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MultiSearchError {
    Status400(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_collection`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchCollectionError {
    Status400(models::ApiResponse),
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_document`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateDocumentError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_documents`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateDocumentsError {
    Status400(models::ApiResponse),
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upsert_search_override`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpsertSearchOverrideError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// Delete an individual document from a collection by using its ID.
pub async fn delete_document(
    configuration: &configuration::Configuration,
    params: DeleteDocumentParams,
) -> Result<serde_json::Value, Error<DeleteDocumentError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/documents/{documentId}",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name),
        documentId = crate::apis::urlencode(params.document_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteDocumentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Delete a bunch of documents that match a specific filter condition. Use the `batch_size` parameter to control the number of documents that should deleted at a time. A larger value will speed up deletions, but will impact performance of other operations running on the server.
pub async fn delete_documents(
    configuration: &configuration::Configuration,
    params: DeleteDocumentsParams,
) -> Result<models::DeleteDocuments200Response, Error<DeleteDocumentsError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/documents",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref param_value) = params.filter_by {
        req_builder = req_builder.query(&[("filter_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.batch_size {
        req_builder = req_builder.query(&[("batch_size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.ignore_not_found {
        req_builder = req_builder.query(&[("ignore_not_found", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.truncate {
        req_builder = req_builder.query(&[("truncate", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DeleteDocuments200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DeleteDocuments200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteDocumentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn delete_search_override(
    configuration: &configuration::Configuration,
    params: DeleteSearchOverrideParams,
) -> Result<models::SearchOverrideDeleteResponse, Error<DeleteSearchOverrideError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/overrides/{overrideId}",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name),
        overrideId = crate::apis::urlencode(params.override_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SearchOverrideDeleteResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SearchOverrideDeleteResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteSearchOverrideError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Export all documents in a collection in JSON lines format.
pub async fn export_documents(
    configuration: &configuration::Configuration,
    params: ExportDocumentsParams,
) -> Result<String, Error<ExportDocumentsError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/documents/export",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.filter_by {
        req_builder = req_builder.query(&[("filter_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.include_fields {
        req_builder = req_builder.query(&[("include_fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.exclude_fields {
        req_builder = req_builder.query(&[("exclude_fields", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        // changed by hand
        match content_type {
            ContentType::Json | ContentType::Text => Ok(content),
            ContentType::Unsupported(unknown_type) => Err(Error::from(
                serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `String`"
                )),
            )),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ExportDocumentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetch an individual document from a collection by using its ID.
pub async fn get_document(
    configuration: &configuration::Configuration,
    params: GetDocumentParams,
) -> Result<serde_json::Value, Error<GetDocumentError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/documents/{documentId}",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name),
        documentId = crate::apis::urlencode(params.document_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetDocumentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Retrieve the details of a search override, given its id.
pub async fn get_search_override(
    configuration: &configuration::Configuration,
    params: GetSearchOverrideParams,
) -> Result<models::SearchOverride, Error<GetSearchOverrideError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/overrides/{overrideId}",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name),
        overrideId = crate::apis::urlencode(params.override_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SearchOverride`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SearchOverride`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSearchOverrideError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_search_overrides(
    configuration: &configuration::Configuration,
    params: GetSearchOverridesParams,
) -> Result<models::SearchOverridesResponse, Error<GetSearchOverridesError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/overrides",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SearchOverridesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SearchOverridesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSearchOverridesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// The documents to be imported must be formatted in a newline delimited JSON structure. You can feed the output file from a Typesense export operation directly as import.
pub async fn import_documents(
    configuration: &configuration::Configuration,
    params: ImportDocumentsParams,
) -> Result<String, Error<ImportDocumentsError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/documents/import",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.batch_size {
        req_builder = req_builder.query(&[("batch_size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.return_id {
        req_builder = req_builder.query(&[("return_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.remote_embedding_batch_size {
        req_builder =
            req_builder.query(&[("remote_embedding_batch_size", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.return_doc {
        req_builder = req_builder.query(&[("return_doc", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.action {
        req_builder = req_builder.query(&[("action", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.dirty_values {
        req_builder = req_builder.query(&[("dirty_values", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };
    // changed by hand
    req_builder = req_builder.body(params.body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        // changed by hand
        match content_type {
            ContentType::Json | ContentType::Text => Ok(content),
            ContentType::Unsupported(unknown_type) => Err(Error::from(
                serde_json::Error::custom(format!(
                    "Received `{unknown_type}` content type response that cannot be converted to `String`"
                )),
            )),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ImportDocumentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// A document to be indexed in a given collection must conform to the schema of the collection.
pub async fn index_document(
    configuration: &configuration::Configuration,
    params: IndexDocumentParams,
) -> Result<serde_json::Value, Error<IndexDocumentError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/documents",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.action {
        req_builder = req_builder.query(&[("action", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.dirty_values {
        req_builder = req_builder.query(&[("dirty_values", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };
    req_builder = req_builder.json(&params.body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexDocumentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// This is especially useful to avoid round-trip network latencies incurred otherwise if each of these requests are sent in separate HTTP requests. You can also use this feature to do a federated search across multiple collections in a single HTTP request.
pub async fn multi_search(
    configuration: &configuration::Configuration,
    params: MultiSearchParams,
    // was modified by hand
) -> Result<serde_json::Value, Error<MultiSearchError>> {
    let uri_str = format!("{}/multi_search", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = params.q {
        req_builder = req_builder.query(&[("q", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.query_by {
        req_builder = req_builder.query(&[("query_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.query_by_weights {
        req_builder = req_builder.query(&[("query_by_weights", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.text_match_type {
        req_builder = req_builder.query(&[("text_match_type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.prefix {
        req_builder = req_builder.query(&[("prefix", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.infix {
        req_builder = req_builder.query(&[("infix", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max_extra_prefix {
        req_builder = req_builder.query(&[("max_extra_prefix", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max_extra_suffix {
        req_builder = req_builder.query(&[("max_extra_suffix", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.filter_by {
        req_builder = req_builder.query(&[("filter_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.sort_by {
        req_builder = req_builder.query(&[("sort_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.facet_by {
        req_builder = req_builder.query(&[("facet_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max_facet_values {
        req_builder = req_builder.query(&[("max_facet_values", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.facet_query {
        req_builder = req_builder.query(&[("facet_query", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.num_typos {
        req_builder = req_builder.query(&[("num_typos", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.group_by {
        req_builder = req_builder.query(&[("group_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.group_limit {
        req_builder = req_builder.query(&[("group_limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.group_missing_values {
        req_builder = req_builder.query(&[("group_missing_values", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.include_fields {
        req_builder = req_builder.query(&[("include_fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.exclude_fields {
        req_builder = req_builder.query(&[("exclude_fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.highlight_full_fields {
        req_builder = req_builder.query(&[("highlight_full_fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.highlight_affix_num_tokens {
        req_builder =
            req_builder.query(&[("highlight_affix_num_tokens", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.highlight_start_tag {
        req_builder = req_builder.query(&[("highlight_start_tag", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.highlight_end_tag {
        req_builder = req_builder.query(&[("highlight_end_tag", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.snippet_threshold {
        req_builder = req_builder.query(&[("snippet_threshold", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.drop_tokens_threshold {
        req_builder = req_builder.query(&[("drop_tokens_threshold", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.drop_tokens_mode {
        req_builder = req_builder.query(&[("drop_tokens_mode", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.typo_tokens_threshold {
        req_builder = req_builder.query(&[("typo_tokens_threshold", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.enable_typos_for_alpha_numerical_tokens {
        req_builder = req_builder.query(&[(
            "enable_typos_for_alpha_numerical_tokens",
            &param_value.to_string(),
        )]);
    }
    if let Some(ref param_value) = params.filter_curated_hits {
        req_builder = req_builder.query(&[("filter_curated_hits", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.enable_synonyms {
        req_builder = req_builder.query(&[("enable_synonyms", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.synonym_prefix {
        req_builder = req_builder.query(&[("synonym_prefix", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.synonym_num_typos {
        req_builder = req_builder.query(&[("synonym_num_typos", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.pinned_hits {
        req_builder = req_builder.query(&[("pinned_hits", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.hidden_hits {
        req_builder = req_builder.query(&[("hidden_hits", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.override_tags {
        req_builder = req_builder.query(&[("override_tags", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.highlight_fields {
        req_builder = req_builder.query(&[("highlight_fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.pre_segmented_query {
        req_builder = req_builder.query(&[("pre_segmented_query", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.preset {
        req_builder = req_builder.query(&[("preset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.enable_overrides {
        req_builder = req_builder.query(&[("enable_overrides", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.prioritize_exact_match {
        req_builder = req_builder.query(&[("prioritize_exact_match", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.prioritize_token_position {
        req_builder = req_builder.query(&[("prioritize_token_position", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.prioritize_num_matching_fields {
        req_builder =
            req_builder.query(&[("prioritize_num_matching_fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.enable_typos_for_numerical_tokens {
        req_builder = req_builder.query(&[(
            "enable_typos_for_numerical_tokens",
            &param_value.to_string(),
        )]);
    }
    if let Some(ref param_value) = params.exhaustive_search {
        req_builder = req_builder.query(&[("exhaustive_search", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.search_cutoff_ms {
        req_builder = req_builder.query(&[("search_cutoff_ms", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.use_cache {
        req_builder = req_builder.query(&[("use_cache", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.cache_ttl {
        req_builder = req_builder.query(&[("cache_ttl", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.min_len_1typo {
        req_builder = req_builder.query(&[("min_len_1typo", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.min_len_2typo {
        req_builder = req_builder.query(&[("min_len_2typo", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.vector_query {
        req_builder = req_builder.query(&[("vector_query", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.remote_embedding_timeout_ms {
        req_builder =
            req_builder.query(&[("remote_embedding_timeout_ms", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.remote_embedding_num_tries {
        req_builder =
            req_builder.query(&[("remote_embedding_num_tries", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.facet_strategy {
        req_builder = req_builder.query(&[("facet_strategy", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.stopwords {
        req_builder = req_builder.query(&[("stopwords", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.facet_return_parent {
        req_builder = req_builder.query(&[("facet_return_parent", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.voice_query {
        req_builder = req_builder.query(&[("voice_query", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.conversation {
        req_builder = req_builder.query(&[("conversation", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.conversation_model_id {
        req_builder = req_builder.query(&[("conversation_model_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.conversation_id {
        req_builder = req_builder.query(&[("conversation_id", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };
    req_builder = req_builder.json(&params.multi_search_searches_parameter);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MultiSearchResult`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MultiSearchResult`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MultiSearchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Search for documents in a collection that match the search criteria.
pub async fn search_collection(
    configuration: &configuration::Configuration,
    params: SearchCollectionParams,
) -> Result<models::SearchResult, Error<SearchCollectionError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/documents/search",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = params.q {
        req_builder = req_builder.query(&[("q", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.query_by {
        req_builder = req_builder.query(&[("query_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.nl_query {
        req_builder = req_builder.query(&[("nl_query", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.nl_model_id {
        req_builder = req_builder.query(&[("nl_model_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.query_by_weights {
        req_builder = req_builder.query(&[("query_by_weights", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.text_match_type {
        req_builder = req_builder.query(&[("text_match_type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.prefix {
        req_builder = req_builder.query(&[("prefix", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.infix {
        req_builder = req_builder.query(&[("infix", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max_extra_prefix {
        req_builder = req_builder.query(&[("max_extra_prefix", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max_extra_suffix {
        req_builder = req_builder.query(&[("max_extra_suffix", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.filter_by {
        req_builder = req_builder.query(&[("filter_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max_filter_by_candidates {
        req_builder = req_builder.query(&[("max_filter_by_candidates", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.sort_by {
        req_builder = req_builder.query(&[("sort_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.facet_by {
        req_builder = req_builder.query(&[("facet_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max_facet_values {
        req_builder = req_builder.query(&[("max_facet_values", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.facet_query {
        req_builder = req_builder.query(&[("facet_query", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.num_typos {
        req_builder = req_builder.query(&[("num_typos", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.page {
        req_builder = req_builder.query(&[("page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.per_page {
        req_builder = req_builder.query(&[("per_page", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.group_by {
        req_builder = req_builder.query(&[("group_by", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.group_limit {
        req_builder = req_builder.query(&[("group_limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.group_missing_values {
        req_builder = req_builder.query(&[("group_missing_values", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.include_fields {
        req_builder = req_builder.query(&[("include_fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.exclude_fields {
        req_builder = req_builder.query(&[("exclude_fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.highlight_full_fields {
        req_builder = req_builder.query(&[("highlight_full_fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.highlight_affix_num_tokens {
        req_builder =
            req_builder.query(&[("highlight_affix_num_tokens", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.highlight_start_tag {
        req_builder = req_builder.query(&[("highlight_start_tag", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.highlight_end_tag {
        req_builder = req_builder.query(&[("highlight_end_tag", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.enable_highlight_v1 {
        req_builder = req_builder.query(&[("enable_highlight_v1", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.snippet_threshold {
        req_builder = req_builder.query(&[("snippet_threshold", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.drop_tokens_threshold {
        req_builder = req_builder.query(&[("drop_tokens_threshold", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.drop_tokens_mode {
        req_builder = req_builder.query(&[("drop_tokens_mode", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.typo_tokens_threshold {
        req_builder = req_builder.query(&[("typo_tokens_threshold", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.enable_typos_for_alpha_numerical_tokens {
        req_builder = req_builder.query(&[(
            "enable_typos_for_alpha_numerical_tokens",
            &param_value.to_string(),
        )]);
    }
    if let Some(ref param_value) = params.filter_curated_hits {
        req_builder = req_builder.query(&[("filter_curated_hits", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.enable_synonyms {
        req_builder = req_builder.query(&[("enable_synonyms", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.synonym_prefix {
        req_builder = req_builder.query(&[("synonym_prefix", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.synonym_num_typos {
        req_builder = req_builder.query(&[("synonym_num_typos", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.pinned_hits {
        req_builder = req_builder.query(&[("pinned_hits", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.hidden_hits {
        req_builder = req_builder.query(&[("hidden_hits", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.override_tags {
        req_builder = req_builder.query(&[("override_tags", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.highlight_fields {
        req_builder = req_builder.query(&[("highlight_fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.split_join_tokens {
        req_builder = req_builder.query(&[("split_join_tokens", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.pre_segmented_query {
        req_builder = req_builder.query(&[("pre_segmented_query", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.preset {
        req_builder = req_builder.query(&[("preset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.enable_overrides {
        req_builder = req_builder.query(&[("enable_overrides", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.prioritize_exact_match {
        req_builder = req_builder.query(&[("prioritize_exact_match", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.max_candidates {
        req_builder = req_builder.query(&[("max_candidates", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.prioritize_token_position {
        req_builder = req_builder.query(&[("prioritize_token_position", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.prioritize_num_matching_fields {
        req_builder =
            req_builder.query(&[("prioritize_num_matching_fields", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.enable_typos_for_numerical_tokens {
        req_builder = req_builder.query(&[(
            "enable_typos_for_numerical_tokens",
            &param_value.to_string(),
        )]);
    }
    if let Some(ref param_value) = params.exhaustive_search {
        req_builder = req_builder.query(&[("exhaustive_search", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.search_cutoff_ms {
        req_builder = req_builder.query(&[("search_cutoff_ms", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.use_cache {
        req_builder = req_builder.query(&[("use_cache", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.cache_ttl {
        req_builder = req_builder.query(&[("cache_ttl", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.min_len_1typo {
        req_builder = req_builder.query(&[("min_len_1typo", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.min_len_2typo {
        req_builder = req_builder.query(&[("min_len_2typo", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.vector_query {
        req_builder = req_builder.query(&[("vector_query", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.remote_embedding_timeout_ms {
        req_builder =
            req_builder.query(&[("remote_embedding_timeout_ms", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.remote_embedding_num_tries {
        req_builder =
            req_builder.query(&[("remote_embedding_num_tries", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.facet_strategy {
        req_builder = req_builder.query(&[("facet_strategy", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.stopwords {
        req_builder = req_builder.query(&[("stopwords", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.facet_return_parent {
        req_builder = req_builder.query(&[("facet_return_parent", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.voice_query {
        req_builder = req_builder.query(&[("voice_query", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.conversation {
        req_builder = req_builder.query(&[("conversation", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.conversation_model_id {
        req_builder = req_builder.query(&[("conversation_model_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = params.conversation_id {
        req_builder = req_builder.query(&[("conversation_id", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SearchResult`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SearchResult`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchCollectionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update an individual document from a collection by using its ID. The update can be partial.
pub async fn update_document(
    configuration: &configuration::Configuration,
    params: UpdateDocumentParams,
) -> Result<serde_json::Value, Error<UpdateDocumentError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/documents/{documentId}",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name),
        documentId = crate::apis::urlencode(params.document_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref param_value) = params.dirty_values {
        req_builder = req_builder.query(&[("dirty_values", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };
    req_builder = req_builder.json(&params.body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `serde_json::Value`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `serde_json::Value`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateDocumentError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// The filter_by query parameter is used to filter to specify a condition against which the documents are matched. The request body contains the fields that should be updated for any documents that match the filter condition. This endpoint is only available if the Typesense server is version `0.25.0.rc12` or later.
pub async fn update_documents(
    configuration: &configuration::Configuration,
    params: UpdateDocumentsParams,
) -> Result<models::UpdateDocuments200Response, Error<UpdateDocumentsError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/documents",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref param_value) = params.filter_by {
        req_builder = req_builder.query(&[("filter_by", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };
    req_builder = req_builder.json(&params.body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::UpdateDocuments200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::UpdateDocuments200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateDocumentsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Create or update an override to promote certain documents over others. Using overrides, you can include or exclude specific documents for a given query.
pub async fn upsert_search_override(
    configuration: &configuration::Configuration,
    params: UpsertSearchOverrideParams,
) -> Result<models::SearchOverride, Error<UpsertSearchOverrideError>> {
    let uri_str = format!(
        "{}/collections/{collectionName}/overrides/{overrideId}",
        configuration.base_path,
        collectionName = crate::apis::urlencode(params.collection_name),
        overrideId = crate::apis::urlencode(params.override_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };
    req_builder = req_builder.json(&params.search_override_schema);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SearchOverride`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SearchOverride`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpsertSearchOverrideError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
