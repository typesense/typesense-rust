/*
 * Typesense API
 *
 * An open source search engine for building delightful search experiences.
 *
 * The version of the OpenAPI document: 28.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};

/// struct for passing parameters to the method [`delete_search_synonym`]
#[derive(Clone, Debug)]
pub struct DeleteSearchSynonymParams {
    /// The name of the collection
    pub collection_name: String,
    /// The ID of the search synonym to delete
    pub synonym_id: String
}

/// struct for passing parameters to the method [`get_search_synonym`]
#[derive(Clone, Debug)]
pub struct GetSearchSynonymParams {
    /// The name of the collection
    pub collection_name: String,
    /// The id of the search synonym
    pub synonym_id: String
}

/// struct for passing parameters to the method [`get_search_synonyms`]
#[derive(Clone, Debug)]
pub struct GetSearchSynonymsParams {
    /// The name of the collection
    pub collection_name: String
}

/// struct for passing parameters to the method [`upsert_search_synonym`]
#[derive(Clone, Debug)]
pub struct UpsertSearchSynonymParams {
    /// The name of the collection
    pub collection_name: String,
    /// The ID of the search synonym to create/update
    pub synonym_id: String,
    /// The search synonym object to be created/updated
    pub search_synonym_schema: models::SearchSynonymSchema
}


/// struct for typed errors of method [`delete_search_synonym`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSearchSynonymError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_search_synonym`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSearchSynonymError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_search_synonyms`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSearchSynonymsError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upsert_search_synonym`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpsertSearchSynonymError {
    Status404(models::ApiResponse),
    UnknownValue(serde_json::Value),
}


pub async fn delete_search_synonym(configuration: &configuration::Configuration, params: DeleteSearchSynonymParams) -> Result<models::SearchSynonymDeleteResponse, Error<DeleteSearchSynonymError>> {

    let uri_str = format!("{}/collections/{collectionName}/synonyms/{synonymId}", configuration.base_path, collectionName=crate::apis::urlencode(params.collection_name), synonymId=crate::apis::urlencode(params.synonym_id));
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SearchSynonymDeleteResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SearchSynonymDeleteResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<DeleteSearchSynonymError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Retrieve the details of a search synonym, given its id.
pub async fn get_search_synonym(configuration: &configuration::Configuration, params: GetSearchSynonymParams) -> Result<models::SearchSynonym, Error<GetSearchSynonymError>> {

    let uri_str = format!("{}/collections/{collectionName}/synonyms/{synonymId}", configuration.base_path, collectionName=crate::apis::urlencode(params.collection_name), synonymId=crate::apis::urlencode(params.synonym_id));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SearchSynonym`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SearchSynonym`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSearchSynonymError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

pub async fn get_search_synonyms(configuration: &configuration::Configuration, params: GetSearchSynonymsParams) -> Result<models::SearchSynonymsResponse, Error<GetSearchSynonymsError>> {

    let uri_str = format!("{}/collections/{collectionName}/synonyms", configuration.base_path, collectionName=crate::apis::urlencode(params.collection_name));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SearchSynonymsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SearchSynonymsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSearchSynonymsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Create or update a synonym  to define search terms that should be considered equivalent.
pub async fn upsert_search_synonym(configuration: &configuration::Configuration, params: UpsertSearchSynonymParams) -> Result<models::SearchSynonym, Error<UpsertSearchSynonymError>> {

    let uri_str = format!("{}/collections/{collectionName}/synonyms/{synonymId}", configuration.base_path, collectionName=crate::apis::urlencode(params.collection_name), synonymId=crate::apis::urlencode(params.synonym_id));
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("X-TYPESENSE-API-KEY", value);
    };
    req_builder = req_builder.json(&params.search_synonym_schema);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SearchSynonym`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SearchSynonym`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<UpsertSearchSynonymError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

